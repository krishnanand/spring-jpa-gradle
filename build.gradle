/*
 * This file was generated by the Gradle 'init' task.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'io.franzbecker.gradle-lombok' version '1.14'
}

apply plugin: 'org.springframework.boot'
apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin
apply plugin: "io.spring.dependency-management"
apply plugin: 'jacoco'
apply plugin: 'com.palantir.docker'

bootJar {
    baseName = 'iheartdemo'
    version =  '1.0-SNAPSHOT'
}

repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

springBoot {
    mainClassName = 'com.iheartmedia.IHeartMedia'
}

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}

dependencies {
    compile 'org.springframework:spring-web:5.0.9.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.5.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.0.5.RELEASE'
    compile 'org.projectlombok:lombok:1.18.4'
    compile 'org.springframework.retry:spring-retry:1.2.2.RELEASE'
    compile 'io.springfox:springfox-swagger2:2.9.2'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'
    runtime 'com.h2database:h2:1.4.197'
    testCompile 'org.springframework.boot:spring-boot-starter-test:2.0.5.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-actuator:2.0.5.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.5.RELEASE'
}

group = 'com.iheartmedia'
version = '1.0-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    name "${project.group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}
// end::task[]
